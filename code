# Importing the libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn import metrics
import pydotplus
from IPython.display import Image

# Importing the dataset
data = pd.read_csv('hmda_lar.csv')
dataset = data.copy()

features = ['applicant_income_000s','loan_amount_000s','loan_type','loan_purpose','agency_code']
target_variable = ['action_taken']

# Identify the columns with null values and fill the null values
dataset['applicant_income_000s'].fillna(dataset['applicant_income_000s'].mean(), inplace=True)

#Split test and train data
X = dataset[features]
y = dataset['action_taken']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)


# Fitting the Decision Tree model to Training Set
clf = tree.DecisionTreeClassifier(criterion="entropy",max_depth=5)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

# Making the Confusion Matrix
cm = metrics.confusion_matrix(y_test, y_pred)
print("----- Confusion Matrix  -----")
print(cm)

print("Decision Tree Accuracy:", metrics.accuracy_score(y_test, y_pred))

print("----- Decision Tree Classification Report  -----")
print(metrics.classification_report(y_test, y_pred))

# View the decision tree
data_feature_names = ['Applicant Income', 'Loan Amount','Loan Type','Loan Purpose','Agency']
plotData=tree.export_graphviz(clf, out_file=None, filled=True, rounded=True, special_characters=True,
               feature_names=data_feature_names)
graph = pydotplus.graph_from_dot_data(plotData)
graph.write_png('DecisionTree.png')
Image(graph.create_png())
print("Decision Tree Created")


